<?php

 /*               DO NOT EDIT THIS FILE

  Edit the file in the MyComponent config directory
  and run ExportObjects

 */



$packageNameLower = 'modjwt'; /* No spaces, no dashes */

$components = array(
    /* These are used to define the package and set values for placeholders */
    'packageName' => 'modJWT',  /* No spaces, no dashes */
    'packageNameLower' => $packageNameLower,
    'packageDescription' => 'modJWT project for MyComponent extra',
    'version' => '1.0.0',
    'release' => 'beta',
    'author' => 'Zaenal',
    'email' => 'zaenal(#)lokamaya.com',
    'authorUrl' => 'https://github.com/lokamaya',
    'authorSiteName' => "Lokamaya",
    'packageDocumentationUrl' => 'https://github.com/lokamaya/modJWT',
    'copyright' => '2019',

    /* no need to edit this except to change format */
    'createdon' => strftime('%m-%d-%Y'),

    'gitHubUsername' => 'lokamaya',
    'gitHubRepository' => 'modJWT',

    /* two-letter code of your primary language */
    'primaryLanguage' => 'en',

    /* Set directory and file permissions for project directories */
    'dirPermission' => 0755,  /* No quotes!! */
    'filePermission' => 0644, /* No quotes!! */

    /* Define source and target directories */

    /* path to MyComponent source files */
    'mycomponentRoot' => $this->modx->getOption('mc.root', null,
        MODX_CORE_PATH . 'components/mycomponent/'),

    /* path to new project root */
    'targetRoot' => MODX_ASSETS_PATH . 'mycomponents/' . $packageNameLower . '/',


    /* *********************** NEW SYSTEM SETTINGS ************************ */

    /* If your extra needs new System Settings, set their field values here.
     * You can also create or edit them in the Manager (System -> System Settings),
     * and export them with exportObjects. If you do that, be sure to set
     * their namespace to the lowercase package name of your extra */

    'newSystemSettings' => array(
        'modjwt.enabled' => array( // key
            'key'       => 'modjwt.enabled',
            'name'      => 'Panic Button',
            'description' => 'One click setting to disable modJWT without unistall it',
            'xtype'     => 'combo-boolean',
            'value'     => true,
            'area'      => 'modjwt_setting',
            'namespace' => 'modjwt',
        ),
        'modjwt.corePath' => array( // key
            'key'       => 'modjwt.corePath',
            'name'      => 'Development Core Path',
            'description' => 'Core path for development purpose',
            'xtype'     => 'textfield',
            'value'     => '',
            'area'      => 'modjwt_setting',
            'namespace' => 'modjwt',
        ),
        'modjwt.assetPath' => array( // key
            'key'       => 'modjwt.assetPath',
            'name'      => 'Development Assets Path',
            'description' => 'Asset path for development purpose',
            'xtype'     => 'textfield',
            'value'     => '',
            'area'      => 'modjwt_setting',
            'namespace' => 'modjwt',
        ),
        'modjwt.secretkey' => array( // key
            'key'       => 'modjwt.secretkey',
            'name'      => 'Secret Key',
            'description' => 'Use this as <strong>Secret Key</strong> for symmetric algorithm (i.e. HS256)',
            'xtype'     => 'textfield',
            'value'     => 'my-secret-key-please-change-' . substr(md5(rand()),1,7),
            'area'      => 'modjwt_key',
            'namespace' => 'modjwt',
        ),
        'modjwt.privatekey' => array( // key
            'key'       => 'modjwt.privatekey',
            'name' => 'Private Key',
            'description' => 'Absolute path to <strong>private key</strong> file for issuing asymmetric algorithm (i.e. RS256)',
            'xtype'     => 'textfield',
            'value'     => '',
            'area'      => 'modjwt_key',
            'namespace' => 'modjwt',
        ),
        'modjwt.publickey' => array( // key
            'key'       => 'modjwt.publickey',
            'name' => 'Public Key',
            'description' => 'Absolute path to <strong>public key</strong> file for validating asymmetric algorithm (i.e. RS256)',
            'xtype'     => 'textfield',
            'value'     => '',
            'area'      => 'modjwt_key',
            'namespace' => 'modjwt',
        ),
    ),


    /* ************************ NEW SYSTEM EVENTS ************************* */

    /* Array of your new System Events (not default
     * MODX System Events). Listed here so they can be created during
     * install and removed during uninstall.
     *
     * Warning: Do *not* list regular MODX System Events here !!! */

    'newSystemEvents' => array(
        'OnJWTBeforeFire' => array(
            'name' => 'OnJWTBeforeFire',
            'groupname' => 'modJWT',
            'service' => 1,
        ),
        'OnJWTAuthenticated' => array(
            'name' => 'OnJWTAuthenticated',
            'groupname' => 'modJWT',
            'service' => 2,
        ),
    ),

    /* ************************ NAMESPACE(S) ************************* */
    /* (optional) Typically, there's only one namespace which is set
     * to the $packageNameLower value. Paths should end in a slash
    */

    'namespaces' => array(
        'modjwt' => array(
            'name' => 'modjwt',
            'path' => '{core_path}components/modjwt/',
            'assets_path' => '{assets_path}components/modjwt/',
        ),

    ),

    /* ************************* CATEGORIES *************************** */
    /* (optional) List of categories. This is only necessary if you
     * need to categories other than the one named for packageName
     * or want to nest categories.
    */

    'categories' => array(
        'modJWT' => array(
            'category' => 'modJWT',
            'parent' => '',  /* top level category */
        ),
    ),

    /* ************************* ELEMENTS **************************** */

    /* Array containing elements for your extra. 'category' is required
       for each element, all other fields are optional.
       Property Sets (if any) must come first!

       The standard file names are in this form:
           SnippetName.snippet.php
           PluginName.plugin.php
           ChunkName.chunk.html
           TemplateName.template.html

       If your file names are not standard, add this field:
          'filename' => 'actualFileName',
    */


    'elements' => array(
        'propertySets' => array( /* all three fields are required */
            'jwtdecodeprops' => array(
                'name' => 'jwtdecodeprops',
                'description' => 'jwtDecode properties',
                'category' => 'modJWT',
            ),
            'jwtencodeprops' => array(
                'name' => 'jwtencodeprops',
                'description' => 'jwtEncode properties',
                'category' => 'modJWT',
            ),
            'jwtpluginprops' => array(
                'name' => 'jwtpluginprops',
                'description' => 'JWT plugin propertis',
                'category' => 'modJWT',
            ),
        ),

        'snippets' => array(
            'jwtdecode' => array(
                'category' => 'modJWT',
                'description' => 'Validating or encoding JWT Token, return Payload Data',
                'static' => false,
                'propertySets' => array(
                    'jwtdecodeprops'
                ),
            ),

            'jwtdecoderunsnippet' => array(
                'category' => 'modJWT',
                'description' => 'Output custom value after validating Token',
                'static' => false,
                'propertySets' => array(
                    'jwtdecodeprops'
                ),
            ),

            'jwtencode' => array( /* modjwt with static and property set(s)  */
                'category' => 'modJWT',
                'description' => 'Issuing or encoding JWT Token.',
                'static' => false,
                'propertySets' => array(
                    'jwtencodeprops'
                ),
            ),

        ),
        'plugins' => array(
            'jwtOnAuthorization' => array( /* modjwt with static, events, and property sets */
                'category' => 'modJWT',
                'description' => 'Description for Plugin one',
                'static' => false,
                'propertySets' => array( /* all property sets to be connected to element */
                    'jwtpluginprops',
                ),
                'events' => array(
                    'OnJWTBeforeFire' => array(),
                    'OnJWTAuthenticated' => array(),
                ),
            ),
        ),
        'chunks' => array(
            'modjwtCssSample' => array(
                'description' => 'Sample CSS for modJWT',
                'category' => 'modJWT',
            ),
            'modjwtScriptSample' => array(
                'description' => 'Sample script for modJWT',
                'category' => 'modJWT'
            ),
        ),
    ),
    /* (optional) will make all element objects static - 'static' field above will be ignored */
    'allStatic' => false,


    /* ************************* RESOURCES ****************************
     Important: This list only affects Bootstrap. There is another
     list of resources below that controls ExportObjects.
     * ************************************************************** */
    /* Array of Resource pagetitles for your Extra; All other fields optional.
       You can set any resource field here */
    'resources' => array(
        'modjwt' => array( /* minimal modjwt */
            'pagetitle' => 'ModJWT',
            'longtitle' => 'ModJWT Sample Page',
            'alias' => 'modjwt',
            'richtext' => false,
            'published' => true,
            'container' => true,
        ),
        'token' => array( /* idea: json page */
            'pagetitle' => 'Token',
            'longtitle' => 'Issuing Token - JSON',
            'alias' => 'token',
            'parent' => 'modjwt',
            'richtext' => false,
            'published' => true,
            'container' => true,
            'content_type' => 7,
        ),
        'validate' => array( /* idea: json page */
            'pagetitle' => 'Validate',
            'longtitle' => 'Validating Token - JSON',
            'alias' => 'validate',
            'parent' => 'modjwt',
            'richtext' => false,
            'published' => true,
            'container' => true,
            'content_type' => 7,
        ),
        'custom' => array( /* idea: json page */
            'pagetitle' => 'Custom',
            'longtitle' => 'Validating Token & output custom value',
            'alias' => 'custom',
            'parent' => 'modjwt',
            'richtext' => false,
            'published' => true,
            'container' => true,
            'content_type' => 7,
        ),
    ),


    /* Array of languages for which you will have language files,
     *  and comma-separated list of topics
     *  ('.inc.php' will be added as a suffix). */
    'languages' => array(
        'en' => array(
            'default',
            'properties',
        ),
    ),
    /* ********************************************* */
    /* Define optional directories to create under assets.
     * Add your own as needed.
     * Set to true to create directory.
     * Set to hasAssets = false to skip.
     * Empty js and/or css files will be created.
     */
    'hasAssets' => false,

    'assetsDirs' => array(
        /* If true, a default (empty) CSS file will be created */
        'css' => true,

        /* If true, a default (empty) JS file will be created */
        'js' => true,

        'images' => false,
        'audio' => false,
        'video' => false,
        'themes' => false,
    ),
    /* minify any JS files */
    'minifyJS' => false,
    /* Create a single JS file from all JS files */
    'createJSMinAll' => false,
    /* if this is false, regular jsmin will be used.
       JSMinPlus is slower but more reliable */
    'useJSMinPlus' => false,

    /* These will automatically go under assets/components/yourcomponent/js/
       Format: directory:filename
       (no trailing slash on directory)
       if 'createCmpFiles is true, these will be ignored.
    */
    'jsFiles' => array(
        'sample-modjwt.js',
    ),

    /* Desired CSS files */
    'cssFiles' => array(
        'sample-modjwt.css',
    ),

    /* ********************************************* */
    /* Define basic directories and files to be created in project*/

    'docs' => array(
        'readme.txt',
        'license.txt',
        'changelog.txt',
    ),

    /* (optional) Description file for GitHub project home page */
    'readme.md' => true,
    /* assume every package has a core directory */
    'hasCore' => true,

    /* ********************************************* */
    /* (optional) Array of extra script resolver(s) to be run
     * during install. Note that resolvers to connect plugins to events,
     * property sets to elements, resources to templates, and TVs to
     * templates will be created automatically -- *don't* list those here!
     *
     * 'default' creates a default resolver named after the package.
     * (other resolvers may be created above for TVs and plugins).
     * Suffix 'resolver.php' will be added automatically */
    'resolvers' => array(
        'default',
    ),

    /* (optional) Validators can abort the install after checking
     * conditions. Array of validator names (no
     * prefix of suffix) or '' 'default' creates a default resolver
     *  named after the package suffix 'validator.php' will be added */

    'validators' => array(
        'default',
    ),

    /* (optional) install.options is needed if you will interact
     * with user during the install.
     * See the user.input.php file for more information.
     * Set this to 'install.options' or ''
     * The file will be created as _build/install.options/user.input.php
     * Don't change the filename or directory name. */
    'install.options' => 'install.options',


    /* Suffixes to use for resource and element code files (not implemented)  */
    'suffixes' => array(
        'modPlugin' => '.php',
        'modSnippet' => '.php',
        'modChunk' => '.html',
        'modTemplate' => '.html',
        'modResource' => '.html',
    ),


    /* ********************************************* */
    /* (optional) Only necessary if you will have class files.
     *
     * Array of class files to be created.
     *
     * Format is:
     *
     * 'ClassName' => 'directory:filename',
     *
     * or
     *
     *  'ClassName' => 'filename',
     *
     * ('.class.php' will be appended automatically)
     *
     *  Class file will be created as:
     * yourcomponent/core/components/yourcomponent/model/[directory/]{filename}.class.php
     * Note: If a CMP is being created, classes containing the
     * project name will be ignored here.
     *
     * Set to array() if there are no classes. */
    'classes' => array(
        'modFirebaseJWT' => 'modjwt:modfirebasejwt',
        'JWT' => 'modjwt.jwt.firebase:JWT',

        /* (optional) - Specify methods for each class.
           if 'function' is missing, 'public function ' will
           be prepended. Curly braces will be added   */
        'methods' => array(
            /* Add one array here for each class with methods */
            'modFirebaseJWT' => array(
                'public function encodeJWT()',
                'public function decodeJWT()',
            ),
            'JWT' => array(
                'public function encode()',
                'public function decode()',
            ),
        ),
    ),

    /* These will automatically go in assets/components/yourcomponent/ */

    'connectors' => array(
        'connector.php'
    ),

    /* *******************************************
     * These settings control exportObjects.php  *
     ******************************************* */
    /* ExportObjects will update existing files. If you set dryRun
       to '1', ExportObjects will report what it would have done
       without changing anything. Note: On some platforms,
       dryRun is *very* slow  */

    'dryRun' => '0',

    /* Array of elements to export. All elements set below will be handled.
     *
     * To export resources, be sure to list pagetitles and/or IDs of parents
     * of desired resources
    */
    'process' => array(
        'snippets',
        'plugins',
        'chunks',
        'resources',
        'propertySets',
        'systemSettings',
        'systemEvents',
    ),
    /*  Array  of resources to process. You can specify specific resources
        or parent (container) resources, or both.

        They can be specified by pagetitle or ID, but you must use the same method
        for all settings and specify it here. Important: use IDs if you have
        duplicate pagetitles */
    'getResourcesById' => false,

    'exportResources' => array(
        'ModJWT',
        'Token',
        'Validate',
        'Custom',
    ),
    /* Array of resource parent IDs to get children of. */
    'parents' => array('ModJWT'),
    /* Also export the listed parent resources
      (set to false to include just the children) */
    'includeParents' => true,


    /* ******************** LEXICON HELPER SETTINGS ***************** */
    /* These settings are used by LexiconHelper */
    'rewriteCodeFiles' => false,  /* remove ~~descriptions */
    'rewriteLexiconFiles' => true, /* automatically add missing strings to lexicon files */
    /* ******************************************* */

    /* Array of aliases used in code for the properties array.
     * Used by the checkproperties utility to check properties in code against
     * the properties in your properties transport files.
     * if you use something else, add it here (OK to remove ones you never use.
     * Search also checks with '$this->' prefix -- no need to add it here. */
    'scriptPropertiesAliases' => array(
        'props',
        'configs',
        'keys',
        'config',
        'scriptProperties'
    ),
);

return $components;